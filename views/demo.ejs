<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Search Box</title>
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 60%;
        width: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
      }

      #infowindow-content .title {
        font-weight: bold;
      }

      #infowindow-content {
        display: none;
      }

      #map #infowindow-content {
        display: inline;
      }

      .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
      }

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #pac-input {
        background-color: white;
        margin: 15px 30px;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        padding: 10px;
        text-overflow: ellipsis;
        width: 60%;
        border: 1px solid;
        border-color: transparent;
        border-radius: 5px
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
      }
      #target {
        width: 345px;
      }
    </style>
  </head>
  <body>
    <input id="pac-input" class="controls" type="text" placeholder="Look up a place!">
    <div id="map"></div>
    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 49.2827, lng: -123.1207},
          zoom: 11,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          let infoWindow = new google.maps.InfoWindow();
      
          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            console.log(place)
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };
            
            //EDITED
            if (place.photos){
            markers.push(new google.maps.Marker({
              map: map,
              icon: "https://66.media.tumblr.com/tumblr_m7wvguKViU1r17mw1.png",
              title: place.name,
              photo: place.photos[0].getUrl(),
              position: place.geometry.location
            }));
          } else {
            markers.push(new google.maps.Marker({
              map: map,
              icon: "https://66.media.tumblr.com/tumblr_m7wvguKViU1r17mw1.png",
              position: place.geometry.location
            }));
          }
            
            //EDITED
            function loadInfoWindow(markers) {
              for (let i = 0; i < markers.length; i++) {
                google.maps.event.addListener(markers[i], 'click', function () {
                  if (markers[i].title){
                  infoWindow.setContent(`<h3>${markers[i].title}</h3>`
                    + `<img src="${markers[i].photo}" style="max-width:180px;max-height:100px;">`
                    + '<form class="point">Description:<br><input type="text" name="description" style=width:95%;height:40px;text-align:top;><br>'
                    + '<button type="submit">Add point</button></form>')
                  } else {
                    infoWindow.setContent(
                      '<form class="point">Name:<br><input type="text" name="name" style=width:95%;height:20px;text-align:top;><br>'
                      + '<button class="picture" type="button">Add picture</button>'
                      + '<form>Description:<br><input type="text" name="description" style=width:95%;height:40px;text-align:top;><br>'
                      + '<button type="submit">Add point</button></form>')
                    }
                  infoWindow.open(map, markers[i]);
                })
              };
            }
            loadInfoWindow(markers)
                  
                  if (place.geometry.viewport) {
                    // Only geocodes have viewport.
            bounds.union(place.geometry.viewport);
          } else {
            bounds.extend(place.geometry.location);
          }
        });
        map.fitBounds(bounds);
      });
    }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA7JuJpmxAYqCHC0Z_7STfFWPpXGZ-Z_aU&libraries=places&callback=initAutocomplete"
         async defer></script>
  </body>
</html>